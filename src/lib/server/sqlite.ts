import { drizzle, type BunSQLiteDatabase } from 'drizzle-orm/bun-sqlite';
import { Database } from 'bun:sqlite';
import * as authSchema from './schema/authentication'
import * as businessSchema from './schema/business'
import type { SQLiteTableWithColumns, SQLiteColumn } from 'drizzle-orm/sqlite-core';


let db: BunSQLiteDatabase<{ userTable: SQLiteTableWithColumns<{ name: "user"; schema: undefined; columns: { id: SQLiteColumn<{ name: "id"; tableName: "user"; dataType: "string"; columnType: "SQLiteText"; data: string; driverParam: string; notNull: true; hasDefault: false; isPrimaryKey: true; isAutoincrement: false; hasRuntimeDefault: false; enumValues: [string, ...string[]]; baseColumn: never; generated: undefined; }, object>; username: SQLiteColumn<{ name: "username"; tableName: "user"; dataType: "string"; columnType: "SQLiteText"; data: string; driverParam: string; notNull: true; hasDefault: false; isPrimaryKey: false; isAutoincrement: false; hasRuntimeDefault: false; enumValues: [string, ...string[]]; baseColumn: never; generated: undefined; }, object>; password_hash: SQLiteColumn<{ name: "password_hash"; tableName: "user"; dataType: "string"; columnType: "SQLiteText"; data: string; driverParam: string; notNull: false; hasDefault: false; isPrimaryKey: false; isAutoincrement: false; hasRuntimeDefault: false; enumValues: [string, ...string[]]; baseColumn: never; generated: undefined; }, object>; }; dialect: "sqlite"; }>; sessionTable: SQLiteTableWithColumns<{ name: "session"; schema: undefined; columns: { id: SQLiteColumn<{ name: "id"; tableName: "session"; dataType: "string"; columnType: "SQLiteText"; data: string; driverParam: string; notNull: true; hasDefault: false; isPrimaryKey: true; isAutoincrement: false; hasRuntimeDefault: false; enumValues: [string, ...string[]]; baseColumn: never; generated: undefined; }, object>; userId: SQLiteColumn<{ name: "user_id"; tableName: "session"; dataType: "string"; columnType: "SQLiteText"; data: string; driverParam: string; notNull: true; hasDefault: false; isPrimaryKey: false; isAutoincrement: false; hasRuntimeDefault: false; enumValues: [string, ...string[]]; baseColumn: never; generated: undefined; }, object>; expiresAt: SQLiteColumn<{ name: "expires_at"; tableName: "session"; dataType: "number"; columnType: "SQLiteInteger"; data: number; driverParam: number; notNull: true; hasDefault: false; isPrimaryKey: false; isAutoincrement: false; hasRuntimeDefault: false; enumValues: undefined; baseColumn: never; generated: undefined; }, object>; }; dialect: "sqlite"; }>; semesterTable: SQLiteTableWithColumns<{ name: "semester"; schema: undefined; columns: { id: SQLiteColumn<{ name: "id"; tableName: "semester"; dataType: "number"; columnType: "SQLiteInteger"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; isAutoincrement: false; hasRuntimeDefault: false; enumValues: undefined; baseColumn: never; generated: undefined; }, object>; year: SQLiteColumn<{ name: "year"; tableName: "semester"; dataType: "number"; columnType: "SQLiteInteger"; data: number; driverParam: number; notNull: true; hasDefault: false; isPrimaryKey: false; isAutoincrement: false; hasRuntimeDefault: false; enumValues: undefined; baseColumn: never; generated: undefined; }, object>; isSummerSemester: SQLiteColumn<{ name: "is_summer_semester"; tableName: "semester"; dataType: "boolean"; columnType: "SQLiteBoolean"; data: boolean; driverParam: number; notNull: true; hasDefault: false; isPrimaryKey: false; isAutoincrement: false; hasRuntimeDefault: false; enumValues: undefined; baseColumn: never; generated: undefined; }, object>; }; dialect: "sqlite"; }>; courseTable: SQLiteTableWithColumns<{ name: "course"; schema: undefined; columns: { id: SQLiteColumn<{ name: "id"; tableName: "course"; dataType: "number"; columnType: "SQLiteInteger"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; isAutoincrement: false; hasRuntimeDefault: false; enumValues: undefined; baseColumn: never; generated: undefined; }, object>; title: SQLiteColumn<{ name: "title"; tableName: "course"; dataType: "string"; columnType: "SQLiteText"; data: string; driverParam: string; notNull: false; hasDefault: false; isPrimaryKey: false; isAutoincrement: false; hasRuntimeDefault: false; enumValues: [string, ...string[]]; baseColumn: never; generated: undefined; }, object>; courseTypeId: SQLiteColumn<{ name: "course_type_id"; tableName: "course"; dataType: "number"; columnType: "SQLiteInteger"; data: number; driverParam: number; notNull: false; hasDefault: false; isPrimaryKey: false; isAutoincrement: false; hasRuntimeDefault: false; enumValues: undefined; baseColumn: never; generated: undefined; }, object>; }; dialect: "sqlite"; }>; courseTypeTable: SQLiteTableWithColumns<{ name: "course_type"; schema: undefined; columns: { id: SQLiteColumn<{ name: "id"; tableName: "course_type"; dataType: "number"; columnType: "SQLiteInteger"; data: number; driverParam: number; notNull: true; hasDefault: true; isPrimaryKey: true; isAutoincrement: false; hasRuntimeDefault: false; enumValues: undefined; baseColumn: never; generated: undefined; }, object>; label: SQLiteColumn<{ name: "label"; tableName: "course_type"; dataType: "string"; columnType: "SQLiteText"; data: string; driverParam: string; notNull: false; hasDefault: false; isPrimaryKey: false; isAutoincrement: false; hasRuntimeDefault: false; enumValues: [string, ...string[]]; baseColumn: never; generated: undefined; }, object>; }; dialect: "sqlite"; }>; }> | null

export function connectSQLite() {
    if (db === null) {
        const sqlite = new Database("app.db");
        db = drizzle(sqlite, { schema: { ...businessSchema, ...authSchema } });
    }

    return db;
}